set.seed(456)
datos_dicotomicos <- data.frame(
RespuestaA = factor(sample(c("Si", "No"), 50, replace = TRUE)),
RespuestaB = factor(sample(c("Positivo", "Negativo"), 50, replace = TRUE)),
RespuestaC_Multi = factor(sample(c("A", "B", "C"), 50, replace = TRUE)), # No dicotómica
ValorNumerico = rnorm(50)
)
print(head(datos_dicotomicos))
cat("Datos dicotómicos creados.\n\n")
# Datos para ACM y Clustering (tea de FactoMineR)
# Necesita que el paquete FactoMineR esté instalado
cat("--- Preparando datos 'tea' ---\n")
if (requireNamespace("FactoMineR", quietly = TRUE)) {
data(tea, package = "FactoMineR")
cat("Datos 'tea' cargados.\n")
# Asegurarse de que las variables categóricas sean factores (importante para ACM)
# (Adaptado del ejemplo de realizar_acm)
cols_categoricas_tea <- !(names(tea) %in% c("age")) # Asumimos 'age' es la única numérica
for(col in names(tea)[cols_categoricas_tea]) {
if(!is.factor(tea[[col]])) {
cat("Convirtiendo columna a factor:", col, "\n")
tea[[col]] <- factor(tea[[col]])
}
}
cat("Verificadas/convertidas columnas de 'tea' a factores.\n\n")
} else {
warning("El paquete FactoMineR no está instalado. No se pueden cargar los datos 'tea' para probar ACM.")
# Crear un data frame vacío o NULL para evitar errores posteriores si tea no existe
tea <- NULL
}
# --- Pruebas de las Funciones del Paquete ---
# Prueba de analisis_exploratorio()
cat("\n\n===== Probando analisis_exploratorio() =====\n")
analisis_exploratorio(datos_iris_mod)
analisis_exploratorio(datos_dicotomicos)
if(!is.null(tea)) analisis_exploratorio(head(tea)) # Solo las primeras filas de tea
# Prueba de coeficiente_phi()
cat("\n\n===== Probando coeficiente_phi() =====\n")
phi_ab <- coeficiente_phi(datos_dicotomicos, "RespuestaA", "RespuestaB")
cat("Coeficiente Phi entre RespuestaA y RespuestaB:", phi_ab, "\n")
cat("\nIntentando calcular Phi con variable no dicotómica (espera warning y NA):\n")
phi_ac <- coeficiente_phi(datos_dicotomicos, "RespuestaA", "RespuestaC_Multi")
print(phi_ac)
# Prueba de realizar_acm()
# Solo se ejecuta si los datos 'tea' se cargaron
cat("\n\n===== Probando realizar_acm() =====\n")
if (!is.null(tea)) {
# Ejecutar ACM con algunas opciones
# Usaremos 'Age' (col 19) como quanti.sup y 'where' (col 22) como quali.sup
resultado_acm <- realizar_acm(
datos = tea,
ncp = 5,
quanti.sup = 19 # Índice de 'Age'
quali.sup = 22 # Índice de 'where'
# 1. Datos para EDA y Correlación (iris con algunos NAs)
cat("--- Preparando datos iris_modificado ---\n")
datos_iris_mod <- iris
# Introducir algunos NAs aleatorios
set.seed(123)
n_rows <- nrow(datos_iris_mod)
n_cols <- ncol(datos_iris_mod) - 1 # Excluir Species
for (i in 1:15) { # Poner 15 NAs
row_idx <- sample(1:n_rows, 1)
col_idx <- sample(1:n_cols, 1)
datos_iris_mod[row_idx, col_idx] <- NA
}
print(head(datos_iris_mod))
cat("Valores faltantes introducidos en iris.\n\n")
# 2. Datos para Coeficiente Phi (Dicotómicos)
cat("--- Preparando datos_dicotomicos ---\n")
set.seed(456)
datos_dicotomicos <- data.frame(
RespuestaA = factor(sample(c("Si", "No"), 50, replace = TRUE)),
RespuestaB = factor(sample(c("Positivo", "Negativo"), 50, replace = TRUE)),
RespuestaC_Multi = factor(sample(c("A", "B", "C"), 50, replace = TRUE)), # No dicotómica
ValorNumerico = rnorm(50)
)
print(head(datos_dicotomicos))
cat("Datos dicotómicos creados.\n\n")
# Datos para ACM y Clustering (tea de FactoMineR)
# Necesita que el paquete FactoMineR esté instalado
cat("--- Preparando datos 'tea' ---\n")
if (requireNamespace("FactoMineR", quietly = TRUE)) {
data(tea, package = "FactoMineR")
cat("Datos 'tea' cargados.\n")
# Asegurarse de que las variables categóricas sean factores (importante para ACM)
# (Adaptado del ejemplo de realizar_acm)
cols_categoricas_tea <- !(names(tea) %in% c("age")) # Asumimos 'age' es la única numérica
for(col in names(tea)[cols_categoricas_tea]) {
if(!is.factor(tea[[col]])) {
cat("Convirtiendo columna a factor:", col, "\n")
tea[[col]] <- factor(tea[[col]])
}
}
cat("Verificadas/convertidas columnas de 'tea' a factores.\n\n")
} else {
warning("El paquete FactoMineR no está instalado. No se pueden cargar los datos 'tea' para probar ACM.")
# Crear un data frame vacío o NULL para evitar errores posteriores si tea no existe
tea <- NULL
}
# --- Pruebas de las Funciones del Paquete ---
# Prueba de analisis_exploratorio()
cat("\n\n===== Probando analisis_exploratorio() =====\n")
analisis_exploratorio(datos_iris_mod)
analisis_exploratorio(datos_dicotomicos)
if(!is.null(tea)) analisis_exploratorio(head(tea)) # Solo las primeras filas de tea
# Prueba de coeficiente_phi()
cat("\n\n===== Probando coeficiente_phi() =====\n")
phi_ab <- coeficiente_phi(datos_dicotomicos, "RespuestaA", "RespuestaB")
cat("Coeficiente Phi entre RespuestaA y RespuestaB:", phi_ab, "\n")
cat("\nIntentando calcular Phi con variable no dicotómica (espera warning y NA):\n")
phi_ac <- coeficiente_phi(datos_dicotomicos, "RespuestaA", "RespuestaC_Multi")
print(phi_ac)
# Prueba de realizar_acm()
# Solo se ejecuta si los datos 'tea' se cargaron
cat("\n\n===== Probando realizar_acm() =====\n")
if (!is.null(tea)) {
# Ejecutar ACM con algunas opciones
# Usaremos 'Age' (col 19) como quanti.sup y 'where' (col 22) como quali.sup
resultado_acm <- realizar_acm(
datos = tea,
ncp = 5,
quanti.sup = 19 # Índice de 'Age'
quali.sup = 22 # Índice de 'where'
devtools::install("MoMA")
library(MoMA)
# --- Preparación de Datos de Ejemplo ---
# 1. Datos para EDA y Correlación (iris con algunos NAs)
cat("--- Preparando datos iris_modificado ---\n")
datos_iris_mod <- iris
# Introducir algunos NAs aleatorios
set.seed(123)
n_rows <- nrow(datos_iris_mod)
n_cols <- ncol(datos_iris_mod) - 1 # Excluir Species
for (i in 1:15) { # Poner 15 NAs
row_idx <- sample(1:n_rows, 1)
col_idx <- sample(1:n_cols, 1)
datos_iris_mod[row_idx, col_idx] <- NA
}
print(head(datos_iris_mod))
cat("Valores faltantes introducidos en iris.\n\n")
# 2. Datos para Coeficiente Phi (Dicotómicos)
cat("--- Preparando datos_dicotomicos ---\n")
set.seed(456)
datos_dicotomicos <- data.frame(
RespuestaA = factor(sample(c("Si", "No"), 50, replace = TRUE)),
RespuestaB = factor(sample(c("Positivo", "Negativo"), 50, replace = TRUE)),
RespuestaC_Multi = factor(sample(c("A", "B", "C"), 50, replace = TRUE)), # No dicotómica
ValorNumerico = rnorm(50)
)
print(head(datos_dicotomicos))
cat("Datos dicotómicos creados.\n\n")
# Datos para ACM y Clustering (tea de FactoMineR)
# Necesita que el paquete FactoMineR esté instalado
cat("--- Preparando datos 'tea' ---\n")
if (requireNamespace("FactoMineR", quietly = TRUE)) {
data(tea, package = "FactoMineR")
cat("Datos 'tea' cargados.\n")
# Asegurarse de que las variables categóricas sean factores (importante para ACM)
# (Adaptado del ejemplo de realizar_acm)
cols_categoricas_tea <- !(names(tea) %in% c("age")) # Asumimos 'age' es la única numérica
for(col in names(tea)[cols_categoricas_tea]) {
if(!is.factor(tea[[col]])) {
cat("Convirtiendo columna a factor:", col, "\n")
tea[[col]] <- factor(tea[[col]])
}
}
cat("Verificadas/convertidas columnas de 'tea' a factores.\n\n")
} else {
warning("El paquete FactoMineR no está instalado. No se pueden cargar los datos 'tea' para probar ACM.")
# Crear un data frame vacío o NULL para evitar errores posteriores si tea no existe
tea <- NULL
}
# --- Pruebas de las Funciones del Paquete ---
# Prueba de analisis_exploratorio()
cat("\n\n===== Probando analisis_exploratorio() =====\n")
analisis_exploratorio(datos_iris_mod)
analisis_exploratorio(datos_dicotomicos)
if(!is.null(tea)) analisis_exploratorio(head(tea)) # Solo las primeras filas de tea
# Prueba de coeficiente_phi()
cat("\n\n===== Probando coeficiente_phi() =====\n")
phi_ab <- coeficiente_phi(datos_dicotomicos, "RespuestaA", "RespuestaB")
cat("Coeficiente Phi entre RespuestaA y RespuestaB:", phi_ab, "\n")
cat("\nIntentando calcular Phi con variable no dicotómica (espera warning y NA):\n")
phi_ac <- coeficiente_phi(datos_dicotomicos, "RespuestaA", "RespuestaC_Multi")
print(phi_ac)
# Prueba de realizar_acm()
# Solo se ejecuta si los datos 'tea' se cargaron
cat("\n\n===== Probando realizar_acm() =====\n")
if (!is.null(tea)) {
# Ejecutar ACM con algunas opciones
# Usaremos 'Age' (col 19) como quanti.sup y 'where' (col 22) como quali.sup
resultado_acm <- realizar_acm(
datos = tea,
ncp = 5,
quanti.sup = 19 # Índice de 'Age'
quali.sup = 22 # Índice de 'where'
devtools::install("MoMA")
library(MoMA)
# --- Preparación de Datos de Ejemplo ---
# 1. Datos para EDA y Correlación (iris con algunos NAs)
cat("--- Preparando datos iris_modificado ---\n")
datos_iris_mod <- iris
# Introducir algunos NAs aleatorios
set.seed(123)
n_rows <- nrow(datos_iris_mod)
n_cols <- ncol(datos_iris_mod) - 1 # Excluir Species
for (i in 1:15) { # Poner 15 NAs
row_idx <- sample(1:n_rows, 1)
col_idx <- sample(1:n_cols, 1)
datos_iris_mod[row_idx, col_idx] <- NA
}
print(head(datos_iris_mod))
cat("Valores faltantes introducidos en iris.\n\n")
# 2. Datos para Coeficiente Phi (Dicotómicos)
cat("--- Preparando datos_dicotomicos ---\n")
set.seed(456)
datos_dicotomicos <- data.frame(
RespuestaA = factor(sample(c("Si", "No"), 50, replace = TRUE)),
RespuestaB = factor(sample(c("Positivo", "Negativo"), 50, replace = TRUE)),
RespuestaC_Multi = factor(sample(c("A", "B", "C"), 50, replace = TRUE)), # No dicotómica
ValorNumerico = rnorm(50)
)
print(head(datos_dicotomicos))
cat("Datos dicotómicos creados.\n\n")
# Datos para ACM y Clustering (tea de FactoMineR)
# Necesita que el paquete FactoMineR esté instalado
cat("--- Preparando datos 'tea' ---\n")
if (requireNamespace("FactoMineR", quietly = TRUE)) {
data(tea, package = "FactoMineR")
cat("Datos 'tea' cargados.\n")
# Asegurarse de que las variables categóricas sean factores (importante para ACM)
# (Adaptado del ejemplo de realizar_acm)
cols_categoricas_tea <- !(names(tea) %in% c("age")) # Asumimos 'age' es la única numérica
for(col in names(tea)[cols_categoricas_tea]) {
if(!is.factor(tea[[col]])) {
cat("Convirtiendo columna a factor:", col, "\n")
tea[[col]] <- factor(tea[[col]])
}
}
cat("Verificadas/convertidas columnas de 'tea' a factores.\n\n")
} else {
warning("El paquete FactoMineR no está instalado. No se pueden cargar los datos 'tea' para probar ACM.")
# Crear un data frame vacío o NULL para evitar errores posteriores si tea no existe
tea <- NULL
}
# --- Pruebas de las Funciones del Paquete ---
# Prueba de analisis_exploratorio()
cat("\n\n===== Probando analisis_exploratorio() =====\n")
analisis_exploratorio(datos_iris_mod)
analisis_exploratorio(datos_dicotomicos)
if(!is.null(tea)) analisis_exploratorio(head(tea)) # Solo las primeras filas de tea
# Prueba de coeficiente_phi()
cat("\n\n===== Probando coeficiente_phi() =====\n")
phi_ab <- coeficiente_phi(datos_dicotomicos, "RespuestaA", "RespuestaB")
cat("Coeficiente Phi entre RespuestaA y RespuestaB:", phi_ab, "\n")
cat("\nIntentando calcular Phi con variable no dicotómica (espera warning y NA):\n")
phi_ac <- coeficiente_phi(datos_dicotomicos, "RespuestaA", "RespuestaC_Multi")
print(phi_ac)
# Prueba de realizar_acm()
# Solo se ejecuta si los datos 'tea' se cargaron
cat("\n\n===== Probando realizar_acm() =====\n")
if (!is.null(tea)) {
# Ejecutar ACM con algunas opciones
# Usaremos 'Age' (col 19) como quanti.sup y 'where' (col 22) como quali.sup
resultado_acm <- realizar_acm(
datos = tea,
ncp = 5,
quanti.sup = 19, # Índice de 'Age'
quali.sup = 22, # Índice de 'where'
mostrar_eigen = TRUE,
grafico_scree = TRUE,
grafico_var = TRUE# Mostrar gráficos de factoextra
)
# Verificar el resultado
if (!is.null(resultado_acm)) {
cat("\nResumen del objeto ACM generado:\n")
summary(resultado_acm)
cat("\nACM realizado con éxito.\n")
} else {
cat("Hubo un problema al ejecutar realizar_acm.\n")
}
} else {
cat("Saltando prueba de realizar_acm() porque los datos 'tea' no están disponibles.\n")
}
# 5. Prueba de cluster_acm_kmeans()
# Solo se ejecuta si el ACM se realizó correctamente
cat("\n\n===== Probando cluster_acm_kmeans() =====\n")
if (!is.null(tea) && exists("resultado_acm") && !is.null(resultado_acm)) {
n_dims_cluster <- 5 # Usar las primeras 5 dimensiones del ACM
n_clusters_deseados <- 3
cat(paste("Intentando clustering K-Means con", n_clusters_deseados, "clusters sobre", n_dims_cluster, "dimensiones ACM...\n"))
set.seed(789) # Para reproducibilidad del K-Means
resultado_kmeans <- cluster_acm_kmeans(
resultado_acm = resultado_acm,
n_clusters = n_clusters_deseados,
ncp_kmeans = n_dims_cluster,
nstart = 25 # Buena práctica para K-Means
)
if (!is.null(resultado_kmeans)) {
cat("\nResultado del Clustering K-Means:\n")
print(resultado_kmeans)
# (Opcional) Visualizar clusters en el mapa de individuos ACM
if (requireNamespace("factoextra", quietly = TRUE)) {
cat("\nGenerando gráfico de individuos con clusters K-Means...\n")
print(
factoextra::fviz_mca_ind(resultado_acm,
axes = c(1, 2), # Dimensiones a graficar
habillage = factor(resultado_kmeans$cluster), # Colorear por cluster
addEllipses = TRUE, ellipse.type = "confidence",
repel = TRUE, # Evitar solapamiento
ggtheme = theme_minimal(),
title = "Individuos ACM con Clusters K-Means")
)
} else {
warning("Instala 'factoextra' para visualizar los clusters en el gráfico ACM.")
}
} else {
cat("Hubo un problema al ejecutar cluster_acm_kmeans.\n")
}
} else {
cat("Saltando prueba de cluster_acm_kmeans() porque el resultado de ACM no está disponible.\n")
}
cat("\n\n===== Pruebas del paquete finalizadas =====\n")
# Instalar y cargar MoMA
if (!requireNamespace("MoMA", quietly = TRUE)) {
devtools::install("MoMA")
}
library(MoMA)
# 1. Iris modificado con NAs
datos_iris_mod <- iris
set.seed(123)
datos_iris_mod[sample(nrow(iris), 15), sample(ncol(iris) - 1, 15, replace = TRUE)] <- NA
# 2. Datos dicotómicos
datos_dicotomicos <- data.frame(
A = factor(sample(c("Si", "No"), 50, replace = TRUE)),
B = factor(sample(c("Pos", "Neg"), 50, replace = TRUE)),
C = factor(sample(c("X", "Y", "Z"), 50, replace = TRUE)), # No dicotómica
num = rnorm(50)
)
# 3. Datos 'tea' (si FactoMineR está instalado)
if (requireNamespace("FactoMineR", quietly = TRUE)) {
data(tea, package = "FactoMineR")
tea[sapply(tea, is.character)] <- lapply(tea[sapply(tea, is.character)], as.factor)
} else {
tea <- NULL
}
# 1. Análisis Exploratorio
analisis_exploratorio(datos_iris_mod)
analisis_exploratorio(datos_dicotomicos)
if (!is.null(tea)) analisis_exploratorio(head(tea))
analisis_exploratorio(tea)
# 2. Coeficiente Phi
print(coeficiente_phi(datos_dicotomicos, "A", "B"))
print(coeficiente_phi(datos_dicotomicos, "A", "C")) # Espera NA y warning
# 3. ACM y Clustering (si 'tea' está disponible)
if (!is.null(tea)) {
acm_res <- realizar_acm(tea, ncp = 5, quanti.sup = 19, quali.sup = 22, grafico_var = FALSE)
if (!is.null(acm_res)) {
print(cluster_acm_kmeans(acm_res, n_clusters = 3, ncp_kmeans = 5))
}
}
print(cluster_acm_kmeans(acm_res, n_clusters = 3, ncp_kmeans = 5))
cluster_acm_kmeans(acm_res, n_clusters = 3, ncp_kmeans = 5)
# 3. ACM y Clustering (si 'tea' está disponible)
if (!is.null(tea)) {
acm_res <- realizar_acm(tea, ncp = 5, quanti.sup = 19, quali.sup = 22, grafico_var = TRUE)
if (!is.null(acm_res)) {
cluster_res <- cluster_acm_kmeans(acm_res, n_clusters = 3, ncp_kmeans = 5)
print(cluster_res)
# Visualización del ACM y Clusters
if (requireNamespace("factoextra", quietly = TRUE)) {
print(factoextra::fviz_mca_ind(acm_res,
habillage = factor(cluster_res$cluster),
addEllipses = TRUE,
ellipse.type = "confidence",
repel = TRUE,
ggtheme = theme_minimal(),
title = "ACM con Clusters K-Means"))
} else {
warning("Instala 'factoextra' para visualizar los clusters en el gráfico ACM.")
}
}
}
View(acm_res)
??analisis_exploratorio
help(analisis_exploratorio)
library(readr)
airbnb_nyc <- read_csv("~/Materias Universidad/AMTV/Parcial de segundo Tercio/airbnb_nyc.csv")
View(airbnb_nyc)
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::check()
# --- Carga de Paquetes Necesarios ---
# 1. Tu paquete
library(MoMA)
cat("Paquete MoMA cargado.\n")
install.packages("nycflights13")
# --- Carga de Paquetes Necesarios ---
library(MoMA)
library(nycflights13)
library(dplyr)
library(dplyr)
library(ggplot2)
# Tomar una muestra de 5000 vuelos para agilizar las pruebas
set.seed(123) # Para reproducibilidad de la muestra
flights_sample <- dplyr::sample_n(nycflights13::flights, 5000)
# Preparación de variables:
# - Convertir caracteres relevantes a factores
# - Crear variables dicotómicas de ejemplo
flights_sample <- flights_sample %>%
dplyr::mutate(
# Convertir a factores
carrier = factor(carrier),
origin = factor(origin),
dest = factor(dest),
# Crear variable: Salida tarde (Sí/No) - Dicotómica
salida_tarde = factor(ifelse(dep_delay > 0, "Si", "No")),
# Crear variable: Origen JFK (Sí/No) - Dicotómica
origen_jfk = factor(ifelse(origin == "JFK", "Si", "No")),
# Crear variable: Mes como factor (Policotómica)
mes_factor = factor(month.abb[month], levels = month.abb)
)
# Ver estructura de la muestra preparada
print(dplyr::glimpse(flights_sample))
EDA(flights_sample)
help(EDA)
help(??EDA)
help('??EDA')
# --- Carga de Paquetes Necesarios ---
library(MoMA)
library(nycflights13)
library(dplyr)
library(ggplot2)
# Tomar una muestra de 5000 vuelos para agilizar las pruebas
set.seed(123) # Para reproducibilidad de la muestra
flights_sample <- dplyr::sample_n(nycflights13::flights, 5000)
# Preparación de variables:
# - Convertir caracteres relevantes a factores
# - Crear variables dicotómicas de ejemplo
flights_sample <- flights_sample %>%
dplyr::mutate(
# Convertir a factores
carrier = factor(carrier),
origin = factor(origin),
dest = factor(dest),
# Crear variable: Salida tarde (Sí/No) - Dicotómica
salida_tarde = factor(ifelse(dep_delay > 0, "Si", "No")),
# Crear variable: Origen JFK (Sí/No) - Dicotómica
origen_jfk = factor(ifelse(origin == "JFK", "Si", "No")),
# Crear variable: Mes como factor (Policotómica)
mes_factor = factor(month.abb[month], levels = month.abb)
)
cat("Variables transformadas/creadas: carrier, origin, dest, salida_tarde, origen_jfk, mes_factor.\n")
# Ver estructura de la muestra preparada
print(dplyr::glimpse(flights_sample))
# 1. Prueba de EDA()
cat("\n\n===== Probando EDA() =====\n")
cat("Ejecutando EDA sobre la muestra de flights...\n")
EDA(flights_sample)
cat("EDA finalizado.\n")
# 2. Prueba de correlacion_heatmap() - Varios Métodos
cat("\n\n===== Probando correlacion_heatmap() - Varios Métodos =====\n")
# Seleccionar variables relevantes para cada método para claridad
vars_numericas <- c("dep_delay", "arr_delay", "air_time", "distance", "hour")
vars_dicotomicas <- c("salida_tarde", "origen_jfk")
vars_categoricas <- c("carrier", "origin", "mes_factor", "salida_tarde") # Incluye dicotómicas
cat("\n--- Método: pearson ---\n")
correlacion_heatmap(flights_sample,
variables = vars_numericas, # Solo numéricas
metodo = "pearson",
manejo_na = "pairwise",
digits = 2, type = "lower", hc.order = TRUE)
knitr::opts_chunk$set(echo = TRUE)
install.packages(c("tidyverse", "pheatmap", "factoextra", "cluster", "car", "ggpubr")) # Descomenta si necesitas instalarlas
library(tidyverse)
library(pheatmap)
library(factoextra)
library(cluster)
library(car)
library(ggpubr)
library(readr)
diabetes_data <- read_csv("Materias Universidad/AMTV/diabetes.csv")
install.packages(c("tidyverse", "pheatmap", "factoextra", "cluster", "car", "ggpubr"))
setwd("~/Materias Universidad/AMTV")
# --- Script de Pruebas para MoMA usando nycflights13::flights ---
devtools::document() # Revisa errores aquí
setwd("~/Materias Universidad/AMTV/MoMA")
# --- Script de Pruebas para MoMA usando nycflights13::flights ---
devtools::document() # Revisa errores aquí
devtools::install()    # Ahora sí encuentra la carpeta MoMA
# --- Carga de Paquetes Necesarios ---
library(MoMA)
set.seed(123) # Para reproducibilidad de la muestra
flights_sample <- dplyr::sample_n(nycflights13::flights, 5000)
flights_sample <- flights_sample %>%
dplyr::mutate(
# Convertir a factores
carrier = factor(carrier),
origin = factor(origin),
dest = factor(dest),
# Crear variable: Salida tarde (Sí/No) - Dicotómica
salida_tarde = factor(ifelse(dep_delay > 0, "Si", "No")),
# Crear variable: Origen JFK (Sí/No) - Dicotómica
origen_jfk = factor(ifelse(origin == "JFK", "Si", "No")),
# Crear variable: Mes como factor (Policotómica)
mes_factor = factor(month.abb[month], levels = month.abb)
)
EDA(flights_sample)
